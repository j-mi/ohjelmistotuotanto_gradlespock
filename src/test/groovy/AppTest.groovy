/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
import spock.lang.Specification

class AppTest extends Specification {
    def app
    def setup() {
        app = new App()
    }

    def "input parser should work"() {
        when: "we parse a string array"
        def result = App.parseInput(["1", "2"] as String[] )

        then: "the result should not be null and it should contain the same values"
        result != null && result == [1,2] as int[]
    }

    def "dummy exception testing"() {
        when:"we give a null ref"
        app.dummyMethod(null)

        then:"an exception should be thrown"
        thrown(NullPointerException)
    }

    def "mock logicservice"() {
        setup: "create a mock for our external system and replace the one from the app object"
        def ls = Mock(LogicService) {
            isFirstNumberBigger(_, _) >> {input -> return false}
            isSecondNumberBigger(_, _) >> {input -> return true}
        }
        app.ls = ls

        when: "We call the normal start method"
        app.start(1, 2)

        then: "the system should make two calls, one to each method mocked, no matter what input"
        1 * ls.isFirstNumberBigger(_,_)
        1 * ls.isSecondNumberBigger(_,_)

    }

    def "correct map is generated as a result"() {
        when: 'we call the application with a numbers 1 and 2'
        def result = app.start(1, 2)

        then: 'we should receive a hashmap containing two key-value pairs, false, true, false, true'
        result!=null && result == ["first":false, "second":true]
    }

    def "stub object methods are called correctly"() {

        setup: "create a stub for a logicservice which gives out certain output, and replace the actual object"
        def ls = Stub(LogicService) {
            isSecondNumberBigger(_, _) >> {input -> return false}
            isFirstNumberBigger(_, _) >> {input -> return true}
        }

        app.ls = ls

        when: 'we call the application with a numbers 1 and 2'
        def result = app.start(1, 2)

        then: 'they should each give out the answers defined in the stub'
        result!=null && result == ["first":true, "second":false]
    }


}
